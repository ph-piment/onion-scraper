package dao

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"
)

// News represents a row from 'public.news'.
type News struct {
	ID          int          `json:"id"`          // id
	Title       string       `json:"title"`       // title
	Description string       `json:"description"` // description
	CreatedAt   time.Time    `json:"created_at"`  // created_at
	UpdatedAt   time.Time    `json:"updated_at"`  // updated_at
	DeletedAt   sql.NullTime `json:"deleted_at"`  // deleted_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the News exists in the database.
func (n *News) Exists() bool {
	return n._exists
}

// Deleted returns true when the News has been marked for deletion from
// the database.
func (n *News) Deleted() bool {
	return n._deleted
}

// Insert inserts the News to the database.
func (n *News) Insert(ctx context.Context, db DB) error {
	switch {
	case n._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case n._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.news (` +
		`title, description, created_at, updated_at, deleted_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) RETURNING id`
	// run
	logf(sqlstr, n.Title, n.Description, n.CreatedAt, n.UpdatedAt, n.DeletedAt)
	if err := db.QueryRowContext(ctx, sqlstr, n.Title, n.Description, n.CreatedAt, n.UpdatedAt, n.DeletedAt).Scan(&n.ID); err != nil {
		return logerror(err)
	}
	// set exists
	n._exists = true
	return nil
}

// Update updates a News in the database.
func (n *News) Update(ctx context.Context, db DB) error {
	switch {
	case !n._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case n._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.news SET ` +
		`title = $1, description = $2, created_at = $3, updated_at = $4, deleted_at = $5 ` +
		`WHERE id = $6`
	// run
	logf(sqlstr, n.Title, n.Description, n.CreatedAt, n.UpdatedAt, n.DeletedAt, n.ID)
	if _, err := db.ExecContext(ctx, sqlstr, n.Title, n.Description, n.CreatedAt, n.UpdatedAt, n.DeletedAt, n.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the News to the database.
func (n *News) Save(ctx context.Context, db DB) error {
	if n.Exists() {
		return n.Update(ctx, db)
	}
	return n.Insert(ctx, db)
}

// Upsert performs an upsert for News.
func (n *News) Upsert(ctx context.Context, db DB) error {
	switch {
	case n._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.news (` +
		`id, title, description, created_at, updated_at, deleted_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`title = EXCLUDED.title, description = EXCLUDED.description, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at, deleted_at = EXCLUDED.deleted_at `
	// run
	logf(sqlstr, n.ID, n.Title, n.Description, n.CreatedAt, n.UpdatedAt, n.DeletedAt)
	if _, err := db.ExecContext(ctx, sqlstr, n.ID, n.Title, n.Description, n.CreatedAt, n.UpdatedAt, n.DeletedAt); err != nil {
		return logerror(err)
	}
	// set exists
	n._exists = true
	return nil
}

// Delete deletes the News from the database.
func (n *News) Delete(ctx context.Context, db DB) error {
	switch {
	case !n._exists: // doesn't exist
		return nil
	case n._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.news ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, n.ID)
	if _, err := db.ExecContext(ctx, sqlstr, n.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	n._deleted = true
	return nil
}

// NewsByID retrieves a row from 'public.news' as a News.
//
// Generated from index 'news_pkey'.
func NewsByID(ctx context.Context, db DB, id int) (*News, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, title, description, created_at, updated_at, deleted_at ` +
		`FROM public.news ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	n := News{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&n.ID, &n.Title, &n.Description, &n.CreatedAt, &n.UpdatedAt, &n.DeletedAt); err != nil {
		return nil, logerror(err)
	}
	return &n, nil
}
