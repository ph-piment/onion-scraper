package dao

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"fmt"
	"time"

	"github.com/jmoiron/sqlx"
)

// News represents a row from 'public.news'.
type News struct {
	ID          int       `db:"id"`          // id
	Title       string    `db:"title"`       // title
	Description string    `db:"description"` // description
	CreatedAt   time.Time `db:"created_at"`  // created_at
	UpdatedAt   time.Time `db:"updated_at"`  // updated_at
}

func NewNews(
	ID int,
	Title string,
	Description string,
	CreatedAt time.Time,
	UpdatedAt time.Time,
) *News {
	return &News{
		ID:          ID,
		Title:       Title,
		Description: Description,
		CreatedAt:   CreatedAt,
		UpdatedAt:   UpdatedAt,
	}
}

// Insert inserts the News to the database.
func (n *News) Insert(ctx context.Context, idb interface{}, now time.Time) error {
	n.CreatedAt = now
	n.UpdatedAt = now

	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.news (` +
		`title, description, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) RETURNING id`
	// run
	logf(sqlstr, n.Title, n.Description, n.CreatedAt, n.UpdatedAt)
	switch idb.(type) {
	case *sqlx.DB:
		db := idb.(*sqlx.DB)
		if err := db.QueryRowContext(ctx, sqlstr, n.Title, n.Description, n.CreatedAt, n.UpdatedAt).Scan(&n.ID); err != nil {
			return logerror(err)
		}
	case *sqlx.Tx:
		db := idb.(*sqlx.Tx)
		if err := db.QueryRowContext(ctx, sqlstr, n.Title, n.Description, n.CreatedAt, n.UpdatedAt).Scan(&n.ID); err != nil {
			return logerror(err)
		}
	default:
		return logerror(fmt.Errorf("UNSUPPORTED TYPE: %T", idb))
	}
	return nil
}

// BulkInsert inserts the News to the database.
func (n *News) BulkInsert(ctx context.Context, idb interface{}, rows []News, now time.Time) error {
	// bulk insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.news (` +
		`title, description, created_at, updated_at` +
		`) VALUES (` +
		`:title, :description, :created_at, :updated_at` +
		`)`
	// run
	logf(sqlstr, n.Title, n.Description, n.CreatedAt, n.UpdatedAt)
	switch idb.(type) {
	case *sqlx.DB:
		db := idb.(*sqlx.DB)
		if _, err := db.NamedExec(sqlstr, rows); err != nil {
			return logerror(err)
		}
	case *sqlx.Tx:
		db := idb.(*sqlx.Tx)
		if _, err := db.NamedExec(sqlstr, rows); err != nil {
			return logerror(err)
		}
	default:
		return logerror(fmt.Errorf("UNSUPPORTED TYPE: %T", idb))
	}
	return nil
}

// Update updates a News in the database.
func (n *News) Update(ctx context.Context, idb interface{}, now time.Time) error {
	n.UpdatedAt = now

	// update with composite primary key
	const sqlstr = `UPDATE public.news SET ` +
		`title = $1, description = $2, created_at = $3, updated_at = $4 ` +
		`WHERE id = $5`
	// run
	logf(sqlstr, n.Title, n.Description, n.CreatedAt, n.UpdatedAt, n.ID)
	switch idb.(type) {
	case *sqlx.DB:
		db := idb.(*sqlx.DB)
		if _, err := db.ExecContext(ctx, sqlstr, n.Title, n.Description, n.CreatedAt, n.UpdatedAt, n.ID); err != nil {
			return logerror(err)
		}
	case *sqlx.Tx:
		db := idb.(*sqlx.Tx)
		if _, err := db.ExecContext(ctx, sqlstr, n.Title, n.Description, n.CreatedAt, n.UpdatedAt, n.ID); err != nil {
			return logerror(err)
		}
	default:
		return logerror(fmt.Errorf("UNSUPPORTED TYPE: %T", idb))
	}
	return nil
}

// Upsert performs an upsert for News.
func (n *News) Upsert(ctx context.Context, idb interface{}, now time.Time) error {
	// upsert
	const sqlstr = `INSERT INTO public.news (` +
		`id, title, description, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`title = EXCLUDED.title, description = EXCLUDED.description, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, n.ID, n.Title, n.Description, n.CreatedAt, n.UpdatedAt)
	switch idb.(type) {
	case *sqlx.DB:
		db := idb.(*sqlx.DB)
		if _, err := db.ExecContext(ctx, sqlstr, n.ID, n.Title, n.Description, n.CreatedAt, n.UpdatedAt); err != nil {
			return logerror(err)
		}
	case *sqlx.Tx:
		db := idb.(*sqlx.Tx)
		if _, err := db.ExecContext(ctx, sqlstr, n.ID, n.Title, n.Description, n.CreatedAt, n.UpdatedAt); err != nil {
			return logerror(err)
		}
	default:
		return logerror(fmt.Errorf("UNSUPPORTED TYPE: %T", idb))
	}
	return nil
}

// Delete deletes the News from the database.
func (n *News) Delete(ctx context.Context, idb interface{}, now time.Time) error {
	// delete with single primary key
	const sqlstr = `DELETE FROM public.news ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, n.ID)
	switch idb.(type) {
	case *sqlx.DB:
		db := idb.(*sqlx.DB)
		if _, err := db.ExecContext(ctx, sqlstr, n.ID); err != nil {
			return logerror(err)
		}
	case *sqlx.Tx:
		db := idb.(*sqlx.Tx)
		if _, err := db.ExecContext(ctx, sqlstr, n.ID); err != nil {
			return logerror(err)
		}
	default:
		return logerror(fmt.Errorf("UNSUPPORTED TYPE: %T", idb))
	}
	return nil
}

// NewsByID retrieves a row from 'public.news' as a News.
//
// Generated from index 'news_pkey'.
func NewsByID(ctx context.Context, idb interface{}, id int) (*News, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, title, description, created_at, updated_at ` +
		`FROM public.news ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	n := News{}
	switch idb.(type) {
	case *sqlx.DB:
		db := idb.(*sqlx.DB)
		if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&n.ID, &n.Title, &n.Description, &n.CreatedAt, &n.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
	case *sqlx.Tx:
		db := idb.(*sqlx.Tx)
		if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&n.ID, &n.Title, &n.Description, &n.CreatedAt, &n.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
	default:
		return nil, logerror(fmt.Errorf("UNSUPPORTED TYPE: %T", idb))
	}
	return &n, nil
}
